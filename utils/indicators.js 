// backend/utils/indicators.js

// === SMA ===
const calculateSMA = (data, period) => {
  if (data.length < period) return [];
  return data.slice(period - 1).map((_, i) => {
    const slice = data.slice(i, i + period);
    const sum = slice.reduce((acc, d) => acc + d.close, 0);
    return { time: slice[period - 1].time, value: sum / period };
  });
};

// === EMA ===
const calculateEMA = (data, period) => {
  if (data.length < period) return [];
  const emaData = [];
  const multiplier = 2 / (period + 1);
  let ema = data.slice(0, period).reduce((sum, d) => sum + d.close, 0) / period;
  emaData.push({ time: data[period - 1].time, value: ema });

  for (let i = period; i < data.length; i++) {
    ema = (data[i].close - ema) * multiplier + ema;
    emaData.push({ time: data[i].time, value: ema });
  }
  return emaData;
};

// === RSI ===
const calculateRSI = (data, period = 14) => {
  if (data.length <= period) return [];
  const rsiData = [];
  let gains = 0, losses = 0;

  for (let i = 1; i <= period; i++) {
    const change = data[i].close - data[i - 1].close;
    if (change > 0) gains += change;
    else losses -= change;
  }

  gains /= period;
  losses /= period;
  let rs = losses === 0 ? Infinity : gains / losses;
  rsiData.push({ time: data[period].time, value: rs === Infinity ? 100 : 100 - (100 / (1 + rs)) });

  for (let i = period + 1; i < data.length; i++) {
    const change = data[i].close - data[i - 1].close;
    const gain = Math.max(0, change);
    const loss = Math.max(0, -change);

    gains = ((gains * (period - 1)) + gain) / period;
    losses = ((losses * (period - 1)) + loss) / period;
    rs = losses === 0 ? Infinity : gains / losses;

    rsiData.push({ time: data[i].time, value: rs === Infinity ? 100 : 100 - (100 / (1 + rs)) });
  }
  return rsiData;
};

// === MACD ===
const calculateMACD = (data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) => {
  const emaFast = calculateEMA(data, fastPeriod);
  const emaSlow = calculateEMA(data, slowPeriod);
  const macd = [];

  emaFast.forEach(f => {
    const match = emaSlow.find(e => e.time === f.time);
    if (match) {
      macd.push({ time: f.time, value: f.value - match.value });
    }
  });

  const macdSignal = calculateEMA(macd, signalPeriod);
  const macdHistogram = macd.map(m => {
    const signal = macdSignal.find(s => s.time === m.time);
    if (!signal) return null;
    return {
      time: m.time,
      value: m.value - signal.value,
      color: m.value - signal.value >= 0 ? "#4CAF50" : "#F44336"
    };
  }).filter(Boolean);

  return { macd, macdSignal, macdHistogram };
};

module.exports = {
  calculateSMA,
  calculateEMA,
  calculateRSI,
  calculateMACD
};
